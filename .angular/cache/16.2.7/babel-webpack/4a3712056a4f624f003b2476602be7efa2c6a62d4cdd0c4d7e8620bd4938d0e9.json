{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/overlay\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"@angular/router\";\nlet AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    _overlayContainer;\n    otRootRef;\n    store;\n    constructor(_overlayContainer, otRootRef, store) {\n      this._overlayContainer = _overlayContainer;\n      this.otRootRef = otRootRef;\n      this.store = store;\n    }\n    ngOnInit() {\n      this.store.select(\"theme\").subscribe(newThemeValue => {\n        newThemeValue.isDark ? this.applyOverlayContainerTheme('angular-app-light-theme', newThemeValue.name) : this.applyOverlayContainerTheme('angular-app-dark-theme', newThemeValue.name);\n      });\n    }\n    applyOverlayContainerTheme(oldTheme, newTheme) {\n      if (!!oldTheme && oldTheme !== newTheme) {\n        this._overlayContainer.getContainerElement().classList.remove(oldTheme);\n        this.otRootRef.nativeElement.classList.remove(oldTheme);\n      }\n      this._overlayContainer.getContainerElement().classList.add(newTheme);\n      this.otRootRef.nativeElement.classList.add(newTheme);\n    }\n    static ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.OverlayContainer), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Store));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"template-root\"]],\n      decls: 1,\n      vars: 0,\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"router-outlet\");\n        }\n      },\n      dependencies: [i3.RouterOutlet]\n    });\n  }\n  return AppComponent;\n})();\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}