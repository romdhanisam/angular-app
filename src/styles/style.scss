// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use 'sass:map';
@use 'sass:color';
@use '@angular/material';
@use '@angular/material' as mat;
@use '@angular/material/theming';
@use '@material/theme/theme-color' as mdc-theme-color;
//@use '@material/button/button-theme' as mdc-button-theme;

// Whether duplication warnings should be disabled. Warnings enabled by default.
//mat.$theme-ignore-duplication-warnings: true;

// Common styles for Angular Material
@include mat.core();

@import 'modules/_variables.scss';
@import 'modules/_functions.scss';


@mixin angular-app-theme($theme, $colors) {
  $foreground-palette: map.get($theme, foreground);
  $background-palette: map.get($theme, background);
  $background: theming.mat-color($background-palette, background);
  $card-background: theming.mat-color($background-palette, card);
  $card-foreground: theming.mat-color($foreground-palette, card);
  $muted: theming.mat-color($foreground-palette, secondary-text);
  $muted: theming.mat-color($foreground-palette, secondary-text);
  $muted-light: theming.mat-color($foreground-palette, disabled);

  .spacer {
    flex: 1 1 auto;
    justify-content: space-between;
  }

  .ot-toolbar-success {
    background-color: color.adjust(map.get($colors, indicator-success), $lightness: 20%);
  }
  .ot-toolbar-warning {
    background-color: color.adjust(map.get($colors, indicator-warning), $lightness: 10%);
  }

  .ot-muted {
    color: $muted;
  }

  .ot-muted-light {
    color: $muted-light;
  }

  mat-sidenav-container {
    height: calc(100vh - 65px);
  }

  mat-sidenav {
    width: $baseline-grid * 30;
    border-right: none;
    border-radius: $baseline-grid;
    padding: $baseline-grid * 2;
    text-align: center;
    height: 100vh;
  }

  .mat-mdc-nav-list .mat-mdc-list-item {
    border: 1.5mm solid $card-background;
    min-height: $baseline-grid * 6.5;
  }

  .ot-nav-item-active {
    border: 1.5mm;
  }


  //https://angular-material.dev/articles/customizing-angular-material-button
  //button.success {
  //  background-color: green;
  //}
  // button.success {
  //   &.mat-button,
  //   &.mat-raised-button,
  //   &.mat-flat-button {
  //     border-radius: 25% / 50%;
  //     background-color: green;
  //   }
  // }

  button:disabled {
    cursor: not-allowed;
    pointer-events: all !important;
  }
  button,
  button.mat-button,
  button.mat-raised-button {
    &.success  {
      // border-radius: 25% / 50%;
      background-color: green;

      &:disabled {
        cursor: not-allowed;
        pointer-events: all !important;
        //$on-surface: mdc-theme-color.prop-value(on-surface);
        ////color: rgba($on-surface, 0.12);
        //$is-dark: map.get($theme, is-dark);
        //$disabled-container-color: rgba($on-surface, 0.12);
        //$disabled-ink-color: rgba($on-surface, if($is-dark, 0.5, 0.38));
        //
        //color: rgba($on-surface, 0.4);
        //background-color: rgba($on-surface, 0.12);
        background-color: rgba(mdc-theme-color.prop-value(on-surface), 0.12);
      }
    }
  }
  button.danger {
    background-color: red;

    &:disabled {
      cursor: not-allowed;
      pointer-events: all !important;
      $on-surface: mdc-theme-color.prop-value(on-surface);
      //color: rgba($on-surface, 0.12);
      $is-dark: map.get($theme, is-dark);
      $disabled-container-color: rgba($on-surface, 0.12);
      $disabled-ink-color: rgba($on-surface, if($is-dark, 0.5, 0.38));

      //color: rgba($on-surface, if($is-dark, 0.5, 0.38));
      background-color: rgba($on-surface, 0.12);

      //background-color: rgba(red, 0.12);
      //disabled-container-color: $disabled-container-color;
      //disabled-label-text-color: $disabled-ink-color;
      //container-color: $disabled-container-color;
      //label-text-color: $disabled-ink-color;

      //$on-surface: mdc-theme-color.prop-value(on-surface);
      //$surface: mdc-theme-color.prop-value(surface);
      //$primary: mdc-theme-color.prop-value(primary);
      //$on-primary: mdc-theme-color.prop-value(on-primary);
      //$secondary: mdc-theme-color.prop-value(secondary);
      //$on-secondary: mdc-theme-color.prop-value(on-secondary);
      //$error: mdc-theme-color.prop-value(error);
      //$on-error: mdc-theme-color.prop-value(on-error);
      //

    }
  }

}

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$angular-app-primary: mat.define-palette(mat.$indigo-palette, 500);
$angular-app-accent: mat.define-palette(mat.$light-blue-palette);
// The warn palette is optional (defaults to red).
$angular-app-warn: mat.define-palette(mat.$red-palette);
$angular-app-success: mat.define-palette(mat.$green-palette);

$colors-light: (
  primary: $angular-app-primary,
  accent: $angular-app-accent,
  warn: $angular-app-warn,
  indicator-success: #008000,
  indicator-warning: #ffad20
);
$colors-dark: (
  primary: $angular-app-primary,
  accent: mat.define-palette(mat.$blue-grey-palette),
  indicator-success: #008000,
  indicator-warning: #ffad20
);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
// light theme

$angular-app-light-theme: mat.define-light-theme((
        color: $colors-light,
        typography: mat.define-typography-config(),
        density: 0,
));
// dark theme
$angular-app-dark-theme: mat.define-dark-theme((
        color: $colors-dark,
        typography: mat.define-typography-config(),
        density: 0,
));

// Apply theme by default

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.

.angular-app-dark-theme {
  //@include mat.core-theme($angular-app-dark-theme);
  //@include mat.all-component-themes($angular-app-dark-theme);
  @include mat.all-component-colors($angular-app-dark-theme);
  @include mat.all-component-typographies($angular-app-dark-theme);
  @include mat.all-component-densities($angular-app-dark-theme);
  //@include mat.sidenav-theme($angular-app-dark-theme);
  @include angular-app-theme($angular-app-dark-theme, $colors-dark);
}

.angular-app-light-theme {
  //@include mat.core-theme($angular-app-light-theme);
  //@include mat.all-component-themes($angular-app-light-theme);
  //@include mat.core-theme($angular-app-light-theme);
  @include mat.all-component-colors($angular-app-light-theme);
  @include mat.all-component-typographies($angular-app-light-theme);
  @include mat.all-component-densities($angular-app-light-theme);
  //@include mat.sidenav-theme($angular-app-light-theme);
  @include angular-app-theme($angular-app-light-theme, $colors-light);
}

// Angular Material 15/16 Density
//@include mat.form-field-density(-4);
//@include mat.icon-button-density(-1);

// Angular Material 15/16 standard appearance in form field
.ot-standard-form-field {
  mat-form-field {
    width: 100%;

    .mdc-text-field {
      padding: unset;
    }

    .mdc-notched-outline {
      .mdc-notched-outline__leading {
        display: none;
      }

      .mdc-notched-outline__notch {
        border-radius: 0;
        border-top: none;

        .mdc-floating-label {
          left: 0;
        }
      }

      .mdc-notched-outline__trailing {
        border-radius: 0;
        border-right: none;
        border-top: none;
      }
    }

    .mat-mdc-form-field-hint-wrapper,
    .mat-mdc-form-field-error-wrapper {
      padding: unset;
    }
  }
}

.inline {
  mat-form-field {
    padding-top: 15px;
  }
}

/**
 * Sass Project Structure.
 * See: http://thesassway.com/beginner/how-to-structure-a-sass-project
 *
 * The MODULES directory is reserved for Sass code that doesn't cause Sass to
 * actually output CSS, things like (mixin declarations, functions, variables,
 * placeholder selectors).
 *
 * The PARTIALS directory is where the meat of my CSS is constructed.
 * Break stylesheets into (header, content, sidebar, and footer components and
 * a few others), or break into much finer categories (typography, buttons,
 * textboxes, selectboxes, etcâ€¦).
 *
 * The VIEWS directory is where page specific styles are constructed and
 * partials (if needed) are adapted to their container.
 *
 * FOLDER STRUCTURE:
 *
 * styles/
 * |
 * |-- fonts/                # custom fonts source files.
 * |   ...
 * |
 * |-- modules/              # Modules
 * |   |-- _variables.scss   # Global Variables
 * |   |-- _functions.scss   # Global Functions
 * |   |-- mixins/           # Most used mixins
 *         ...
 * |   ...
 * |
 * |-- partials/             # Partials
 * |   |-- _typography.scss  # Tipography settings and declarations
 * |   |-- _elements.scss    # Set of commons elements
 * |   |-- _layout.scss      # Global parts of the layout
 * |   ...
 * |
 * |-- views/                # Views
 * |   |-- _home.scss        # page/view specific stylesheet
 * |   ...
 * |
 * `-- main.style.scss            # primary Sass file
 *
 */

/*=============
 * FRAMEWORKS *
==============*/

/*==========
 * MODULES *
===========*/

//@import 'modules/mixins/_font-face.scss';
//@import 'modules/mixins/_manage-user-select.scss';
//@import 'modules/mixins/_media-queries-indicator.scss';
//@import 'modules/mixins/_normalize.scss';
//@import 'modules/mixins/_responsive.scss';
//@import 'modules/mixins/_selection.scss';

// Basic Settings.
//@include normalize-all;
//@include manage-user-select;
//@include selection($white, $black);

/*===========
 * PARTIALS *
============*/

//@import 'partials/_typography.scss';
//@import 'partials/_elements.scss';
//@import 'partials/_layout.scss';


/*========
 * VIEWS *
=========*/

@import 'views/_home';

